.\" Automatically generated by Pod::Man version 1.02
.\" Sun Jan  5 19:08:00 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "AVIZ 1"
.TH AVIZ 1 "perl v5.6.0" "2003-01-05" " "
.UC
.SH "NAME"
aviz \- AViz Visualize results of atomistic simulations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBaviz\fR [ -\fBar\fR ] [ -\fBas\fR ] [ -\fBat\fR ] [ -\fBaz\fR ] [ -\fBasm\fR ]  
[-\fBfl\fR \fIlistfile\fR ] [-\fBrm\fR \fIrendermode\fR ] [ -\fBrs\fR \fIrenderstyle\fR ] 
[ -\fBrq\fR \fIrenderquality\fR ] [ -\fBsi\fR \fIrendersize\fR ] [ -\fBsnap\fR ] [ -\fBsnapq\fR ]
[ -\fBv\fR ] [ -\fBversion\fR ] [ -\fBvpm\fR \fIparameterfile\fR ] [ -\fBwatch\fR \fIxyzfile\fR ] [ -\fBlicense\fR ] [ -\fBusage\fR ] [ -\fBh\fR ] [ -\fBhelp\fR ]  
[ Qt options] [  X11 options ] [ \fIxyzfile\fR ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
AViz is a graphical user interface to visualize the results of atomistic
simulations.  In such simulations, one usually operates with a number of 
particles, each of which representing an atom. The result of the simulation 
typically consists of data files containing the coordinates of all the 
simulated atoms.
.PP
AViz can be used to render the simulated particles as little spheres, cubes, or 
dots. It can also be used to render atomistic spins, or any other kind of 
vectors.   Several different shapes and qualities can be used, and 
colors can be assigned to the rendered objects in many different ways.
.PP
Command line options include:
.Ip "-\fBar\fR	Start in auto rotation mode" 4
.IX Item "ar	Start in auto rotation mode"
.Ip "-\fBas\fR	Start in auto spin mode" 4
.IX Item "as	Start in auto spin mode"
.Ip "-\fBat\fR	Start in auto tilt mode" 4
.IX Item "at	Start in auto tilt mode"
.Ip "-\fBaz\fR	Start in auto zoom mode" 4
.IX Item "az	Start in auto zoom mode"
.Ip "-\fBasm\fR	Start in auto snap mode" 4
.IX Item "asm	Start in auto snap mode"
.Ip "-\fBfl\fR \fIlistfile\fR	Start using file list \fIlistfile\fR" 4
.IX Item "fl listfile	Start using file list listfile"
.Ip "-\fBrm\fR \fIrendermode\fR 	Set rendering mode to \fIrendermode\fR where \fIrenderode\fR is one of the following: 'atom', 'spin', 'liquidcrystal', 'polymer' or 'pore'" 4
.IX Item "rm rendermode 	Set rendering mode to rendermode where renderode is one of the following: 'atom', 'spin', 'liquidcrystal', 'polymer' or 'pore'"
.Ip "-\fBrs\fR \fIrenderstyle\fR 	Set rendering style to \fIrenderstyle\fR where \fIrenderstyle\fR is one of the following: 'dots', 'lines', 'cubes', 'cones', 'spheres'  or 'cylinders'" 4
.IX Item "rs renderstyle 	Set rendering style to renderstyle where renderstyle is one of the following: 'dots', 'lines', 'cubes', 'cones', 'spheres'  or 'cylinders'"
.Ip "-\fBrq\fR \fIrenderquality\fR	Set rendering quality to \fIrenderquality\fR where \fIrenderquality\fR is one of the following: 'low', 'high', or 'final'" 4
.IX Item "rq renderquality	Set rendering quality to renderquality where renderquality is one of the following: 'low', 'high', or 'final'"
.Ip "-\fBsi\fR \fIrendersize\fR 	Set size of rendered particles in percentage relative to AViz' notion of 'natural size', where \fIrendersize\fR is an integer" 4
.IX Item "si rendersize 	Set size of rendered particles in percentage relative to AViz' notion of 'natural size', where rendersize is an integer"
.Ip "-\fBsnap\fR 	Take a screen shot of the rendering at startup" 4
.IX Item "snap 	Take a screen shot of the rendering at startup"
.Ip "-\fBsnapq\fR	Take a screen shot of the rendering at startup and exit" 4
.IX Item "snapq	Take a screen shot of the rendering at startup and exit"
.Ip "-\fBv(ersion)\fR	Print version string and exit" 4
.IX Item "v(ersion)	Print version string and exit"
.Ip "-\fBvpm\fR \fIparameterfile\fR	Use view parameters specified in \fIparameterfile\fR" 4
.IX Item "vpm parameterfile	Use view parameters specified in parameterfile"
.Ip "-\fBwatch\fR \fIxyzfile\fR	Update the rendering whenever file \fIxyzfile\fR is modified" 4
.IX Item "watch xyzfile	Update the rendering whenever file xyzfile is modified"
.Ip "-\fBlicense\fR	Print the \s-1GPL\s0 \s-1GNU\s0 license conditions" 4
.IX Item "license	Print the GPL GNU license conditions"
.Ip "-\fBusage\fR		Print a short usage information" 4
.IX Item "usage		Print a short usage information"
.Ip "-\fBh(elp)\fR	Print a short usage information" 4
.IX Item "h(elp)	Print a short usage information"
.PP
AViz is built using the Qt toolkit and recoginizes most of the standard
Qt and X11 command line options.  
.PP
\&\fIxyzfile\fR is a file that contains simulation data (particle positions, 
velocity vectors, etc.) in a exceedingly simple format known as \s-1XYZ\s0 format. 
The format for these files is as follows:
.Ip "1st line: an integer indicating the number of data points" 4
.IX Item "1st line: an integer indicating the number of data points"
.Ip "2nd line: an arbitrary string identifying the data" 4
.IX Item "2nd line: an arbitrary string identifying the data"
.Ip "following lines: all of the form \s-1XX\s0 float1 float2 float3 ....." 4
.IX Item "following lines: all of the form XX float1 float2 float3 ....."
.PP
Each of the lines corresponds to one particle. A one- or two-character
string is used to label the particle, as in 'O' or 'Si'. 
Any combination of characters may be chosen. The following three
floating point numbers represent the x-, y-, and z-coordinate of the
particle. Up to eight additional floating point numbers can be
provided. These additional numbers can be used to visualize properties
such as velocity, energy, etc.
.PP
AViz recognizes some particular labels such as 'Al' and 'Au'. For
these atom types, a default color is defined. For many other elements,
and for atom types such as 'X3', no default color is defined. AViz
will use a blue color to render particles of ''unknown'' type.
.PP
\&\fIparameterfile\fR is a binary file created by AViz during a previous 
session.  
.SH "NOTES"
.IX Header "NOTES"
The AViz interface offers buttons and spin boxes to change the view 
point and various aspects of the rendering, such as colors of the atoms, 
lighting, sizes, annotation, and so on.  The use of these interface 
elements should be self-explanatory.
.Sh "File lists"
.IX Subsection "File lists"
A list of \fIxyzfiles\fR, a so-called \fIlistfile\fR,  can be read in, and AViz 
then allows cycling through the list.   Such a list file simply contains 
the name of all files that should be shown, with a new line for each entry.
.PP
For convenience, the AViz file selector sports a toolbutton to produce 
a file list including all \fIxyzfiles\fR in the current directory.
.Sh "Snapshots and animations"
.IX Subsection "Snapshots and animations"
At each stage, a snapshot of the current rendering can be taken 
by generating a \s-1PNG\s0 image file.   In combination with the command 
line options, AViz offers several possiblities to painlessly generate
a sequence of image files ready to be turned into an animation.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a short \fIxyzfile\fR of the most simple form, containing
only the three coordinate columns:
.PP
8
## Cube
C  1.0 0.0 0.0
C  1.0 1.0 0.0
C  0.0 1.0 0.0
C  0.0 1.0 0.0
C  1.0 0.0 1.0
C  1.0 1.0 1.0
C  0.0 1.0 1.0
C  0.0 1.0 1.0
.PP
To visualize this data set in file \fIcube.xyz\fR with high-quality rendering 
of spheres, use
.PP
.Vb 1
\&        aviz -rq high -rs spheres cube.xyz
.Ve
Here is a short \fIxyzfile\fR with one additional column of data:
.PP
6
## Aluminum oxide
O  \-0.083333 0.250000 0.583333 0.433013
O  0.083333 \-0.250000 \-0.583333 \-0.433013
O  0.250000 0.583333 \-0.083333 0.433013
O  \-0.250000 \-0.583333 0.083333 \-0.433013
Al 0.583333 0.583333 0.583333 1.010363
Al \-0.583333 \-0.583333 \-0.583333 \-1.010363
.PP
To create a snapshot of this data set in file \fIalox.xyz\fR with top-quality 
rendering of spheres, use
.PP
.Vb 1
\&        aviz -snap -rq final -rs spheres cube.xyz
.Ve
If the data points should be rendered as spins or vectors, each entry 
is defined by six numbers. The first three give the location of the spin, and
the second three give the direction. A sample \fIxyzfile\fR might
look like this:
.PP
3
## Spins pointing in z-direction
Sp 0.0 0.0 0.0 0.0 0.0 1.0
Sp 1.0 0.0 0.0 0.0 0.0 1.0
Sp 2.0 0.0 0.0 0.0 0.0 1.0
.PP
To render the spin data in file \fIspin.xyz\fR as high-quality spins and 
update the rendering whenever the file is modified, use
.PP
.Vb 1
\&        aviz -rs spins -rq high -watch spin.xyz
.Ve
.SH "BUGS"
.IX Header "BUGS"
Too numerous to list here.  Please send bug reports and comments to
gery@tx.technion.ac.il 
.SH "FILES"
.IX Header "FILES"
.Ip "\fI./aviz/aviz.vpm\fR	If AViz finds the \fIparameterfile\fR \fI./aviz/aviz.vpm\fR in the user's home directory, the view parameters stored in that file are read and used as defaults" 4
.IX Item "./aviz/aviz.vpm	If AViz finds the parameterfile ./aviz/aviz.vpm in the user's home directory, the view parameters stored in that file are read and used as defaults"
.Ip "\fI.aviz.atom\fR 	If AViz finds the file \fI.aviz/aviz.particle\fR in the user's home directory, the specific particle parameters (colors, color criterion, bonding) are read and used as defaults" 4
.IX Item ".aviz.atom 	If AViz finds the file .aviz/aviz.particle in the user's home directory, the specific particle parameters (colors, color criterion, bonding) are read and used as defaults"
.SH "RELATED INFORMATION"
.IX Header "RELATED INFORMATION"
This software is available under \s-1GNU\s0 General Public License from 
\&\fBhttp://phycomp.technion.ac.il/~aviz\fR.  More information and 
a User's Manual can be found at the same location.
.SH "AUTHORS"
.IX Header "AUTHORS"
Geri Wagner (gery@tx.technion.ac.il) 
Adham Hashibon (phadham@aluf.technion.ac.il)
Computational Physics Group, Technion Haifa Israel
